#define sketchName "freezerAlarm.ino"

/*
   IDE:
     Board: Lolin(Wemos) D1 R2 & Mini

   History:
     5/7/19 - Clone of D:\River Documents\Arduino\Wemos\D1 Mini\Wemos mini DS18B20\ds18b20.ino
              Added mqtt PubSub and WiFi.

*/


#include <OneWire.h>            // Driver for DS18S20, DS18B20, DS1822 Temperature Sensor.
#include "SSD1306Wire.h"        // Wire.h includes OLEDDisplay.h which contains the command definitions.



// Ceate instances of OneWire and SSD1360Wire
OneWire  ds(D4);                                      // ds18b20 on pin D4
SSD1306Wire  display(0x3c, D2, D1);                   // I2C address and pins for Wemos D1 Mini (0x3c,sda,scl, geometry)
//                                                    // Geometry =0 for 128x64 (default), =1 for 128x32


#define DEBUG true  //set to true for debug output, false for no debug ouput
#define Serial if(DEBUG)Serial



// =================================== setup() ===================================
void setup(void)
{
  Serial.begin(115200);
  delay(50);
  Serial.println();
  Serial.println(sketchName);
  Serial.println(F("---MQTT Not Setup yet---"));
  Serial.println();

  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_10);
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setBrightness(16);

  display.clear();                                      // clear the display
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  //display.drawString(0, 0, "ds18b20-mqtt.ino");
  display.drawString(0, 0, sketchName);
  display.display();
  delay(3000);

}


// ==================================== loop() ====================================
void loop(void)
{
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;

  if (!ds.search(addr)) {
    ds.reset_search();
    delay(250);
    return;
  }


  if (OneWire::crc8(addr, 7) != addr[7])  {
    Serial.println("CRC is not valid!");
    return;
  }

  // the first ROM byte indicates which chip
  switch (addr[0])
  {
    case 0x10:
      type_s = 1;
      break;
    case 0x28:
      type_s = 0;
      break;
    case 0x22:
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  }

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);                // Start conversion
  delay(1000);
  present = ds.reset();
  ds.select(addr);
  ds.write(0xBE);

  // Read Scratchpad
  for ( i = 0; i < 9; i++) {
    data[i] = ds.read();
  }

  // Convert the data to actual temperature
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3;                // 9 bit resolution default
    if (data[7] == 0x10)
    {
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw & ~7;                    // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3;               // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1;               // 11 bit res, 375 ms
  }

  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print(F("  Temperature = "));
  Serial.print(celsius);
  Serial.print(F(" Celsius, "));
  Serial.print(fahrenheit);
  Serial.println(F(" Fahrenheit"));
  Serial.println();

  // Send the temperature to the OLED display
  display.clear();                                      // clear the display
  display.setTextAlignment(TEXT_ALIGN_LEFT);
  display.setFont(ArialMT_Plain_10);                    // font can be 10, 16 or 24
  display.drawString(0, 0, "Temperature");
  display.setFont(ArialMT_Plain_24);
  display.drawString(0, 16, String(fahrenheit) + " °F");
  display.drawString(0, 40, String(celsius) + " °C");
  display.display();

}
